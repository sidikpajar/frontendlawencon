{"version":3,"sources":["redux/contact/contactReducer.js","redux/contact/contactTypes.js","redux/contactDetail/contactDetailReducer.js","redux/contactDetail/contactDetailTypes.js","redux/contactAdd/contactAddReducer.js","redux/contactAdd/contactAddTypes.js","redux/contactUpdate/contactUpdateReducer.js","redux/contactUpdate/contactUpdateTypes.js","redux/rootReducer.js","redux/store.js","redux/contact/contactAction.js","redux/contactDetail/contactDetailAction.js","redux/contactAdd/contactAddAction.js","redux/contactUpdate/contactUpdateAction.js","component/pages/Contact.js","component/pages/ContactDetail.js","component/pages/ContactAdd.js","component/pages/ContactUpdate.js","App.js","serviceWorker.js","index.js"],"names":["initialState","loading","contact","error","contactReducer","state","action","type","payload","contactDetail","contactDetailReducer","contactAdd","contactAddReducer","contactUpdate","contactUpdateReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","fetchContactRequest","fetchContactFailure","fetchContactDetailRequest","fetchContactAddRequest","fetchContactUpdateRequest","Contact","props","getDetail","id","a","history","push","pathname","getDelete","fetchContactDelete","goToAddContact","goToUpdateContact","row","console","log","data","this","fetchContact","contactData","Container","style","marginTop","Button","onClick","marginBottom","variant","color","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","key","firstName","lastName","age","marginRight","Component","connect","dispatch","axios","method","url","process","validateStatus","then","response","fetchContactSuccess","catch","errors","params","ContactDetail","getBack","window","location","href","pageURL","substr","lastIndexOf","lastURLSegment","fetchContactDetail","contactDetailData","className","Grid","container","item","sm","xs","width","height","alt","src","photo","ContactAdd","addContact","fetchContactAdd","goToContact","status","Swal","fire","title","text","message","icon","confirmButtonColor","confirmButtonText","result","isConfirmed","reload","TextField","margin","required","fullWidth","label","name","autoFocus","value","onChange","e","setState","target","fetchContactAddSuccess","updateContact","fetchContactUpdate","getLastURl","fetchContactUpdateSuccess","App","path","exact","ContactUpdate","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.12842c6f.chunk.js","sourcesContent":["import { \n  FETCH_CONTACT_REQUEST,\n  FETCH_CONTACT_SUCCESS,\n  FETCH_CONTACT_FAILURE\n } from './contactTypes';\n\nconst initialState = {\n  loading: false,\n  contact: [],\n  error: ''\n}\n\nconst contactReducer = (state = initialState, action) => {\n  switch(action.type){\n    case FETCH_CONTACT_REQUEST : return {\n      ...state,\n      loading: true\n    }\n    case FETCH_CONTACT_SUCCESS : return {\n      loading: false,\n      contact: action.payload,\n      error: ''\n    }\n    case FETCH_CONTACT_FAILURE : return {\n      loading: false,\n      contact: [],\n      error: action.payload\n    }\n    default: return state\n  }\n}\n\nexport default contactReducer","export const FETCH_CONTACT_REQUEST = 'FETCH_CONTACT_REQUEST'\nexport const FETCH_CONTACT_SUCCESS = 'FETCH_CONTACT_SUCCESS'\nexport const FETCH_CONTACT_FAILURE = 'FETCH_CONTACT_FAILURE'","import { \n  FETCH_CONTACT_DETAIL_REQUEST,\n  FETCH_CONTACT_DETAIL_SUCCESS,\n  FETCH_CONTACT_DETAIL_FAILURE\n } from './contactDetailTypes';\n\nconst initialState = {\n  loading: false,\n  contactDetail: [],\n  error: ''\n}\n\nconst contactDetailReducer = (state = initialState, action) => {\n  switch(action.type){\n    case FETCH_CONTACT_DETAIL_REQUEST : return {\n      ...state,\n      loading: true\n    }\n    case FETCH_CONTACT_DETAIL_SUCCESS : return {\n      loading: false,\n      contactDetail: action.payload,\n      error: ''\n    }\n    case FETCH_CONTACT_DETAIL_FAILURE : return {\n      loading: false,\n      contactDetail: [],\n      error: action.payload\n    }\n    default: return state\n  }\n}\n\nexport default contactDetailReducer","export const FETCH_CONTACT_DETAIL_REQUEST = 'FETCH_CONTACT_DETAIL_REQUEST'\nexport const FETCH_CONTACT_DETAIL_SUCCESS = 'FETCH_CONTACT_DETAIL_SUCCESS'\nexport const FETCH_CONTACT_DETAIL_FAILURE = 'FETCH_CONTACT_DETAIL_FAILURE'","import { \n  FETCH_CONTACT_ADD_REQUEST,\n  FETCH_CONTACT_ADD_SUCCESS,\n  FETCH_CONTACT_ADD_FAILURE\n } from './contactAddTypes';\n\nconst initialState = {\n  loading: false,\n  contactAdd: [],\n  error: ''\n}\n\nconst contactAddReducer = (state = initialState, action) => {\n  switch(action.type){\n    case FETCH_CONTACT_ADD_REQUEST : return {\n      ...state,\n      loading: true\n    }\n    case FETCH_CONTACT_ADD_SUCCESS : return {\n      loading: false,\n      contactAdd: action.payload,\n      error: ''\n    }\n    case FETCH_CONTACT_ADD_FAILURE : return {\n      loading: false,\n      contactAdd: [],\n      error: action.payload\n    }\n    default: return state\n  }\n}\n\nexport default contactAddReducer","export const FETCH_CONTACT_ADD_REQUEST = 'FETCH_CONTACT_ADD_REQUEST'\nexport const FETCH_CONTACT_ADD_SUCCESS = 'FETCH_CONTACT_ADD_SUCCESS'\nexport const FETCH_CONTACT_ADD_FAILURE = 'FETCH_CONTACT_ADD_FAILURE'","import { \n  FETCH_CONTACT_UPDATE_REQUEST,\n  FETCH_CONTACT_UPDATE_SUCCESS,\n  FETCH_CONTACT_UPDATE_FAILURE\n } from './contactUpdateTypes';\n\nconst initialState = {\n  loading: false,\n  contactUpdate: [],\n  error: ''\n}\n\nconst contactUpdateReducer = (state = initialState, action) => {\n  switch(action.type){\n    case FETCH_CONTACT_UPDATE_REQUEST : return {\n      ...state,\n      loading: true\n    }\n    case FETCH_CONTACT_UPDATE_SUCCESS : return {\n      loading: false,\n      contactUpdate: action.payload,\n      error: ''\n    }\n    case FETCH_CONTACT_UPDATE_FAILURE : return {\n      loading: false,\n      contactUpdate: [],\n      error: action.payload\n    }\n    default: return state\n  }\n}\n\nexport default contactUpdateReducer","export const FETCH_CONTACT_UPDATE_REQUEST = 'FETCH_CONTACT_UPDATE_REQUEST'\nexport const FETCH_CONTACT_UPDATE_SUCCESS = 'FETCH_CONTACT_UPDATE_SUCCESS'\nexport const FETCH_CONTACT_UPDATE_FAILURE = 'FETCH_CONTACT_UPDATE_FAILURE'","import { combineReducers } from 'redux'\nimport contactReducer from './contact/contactReducer'\nimport contactDetailReducer from './contactDetail/contactDetailReducer'\nimport contactAddReducer from './contactAdd/contactAddReducer'\nimport contactUpdateReducer from './contactUpdate/contactUpdateReducer'\n\nconst rootReducer = combineReducers({\n  contact: contactReducer,\n  contactDetail:contactDetailReducer,\n  contactAdd:contactAddReducer,\n  contactUpdate:contactUpdateReducer,\n})\n\nexport default rootReducer","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n// import logger from 'redux-logger'\nimport rootReducer from './rootReducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(\n  rootReducer, \n  composeWithDevTools(applyMiddleware(thunk))\n)\n\nexport default store","import axios from 'axios';\n\nimport { \n  FETCH_CONTACT_REQUEST,\n  FETCH_CONTACT_SUCCESS,\n  FETCH_CONTACT_FAILURE,\n } from './contactTypes';\n\nexport const fetchContactRequest = () => {\n  return {\n    type: FETCH_CONTACT_REQUEST\n  }\n}\n\nexport const fetchContactSuccess = contact => {\n  return {\n    type: FETCH_CONTACT_SUCCESS,\n    payload: contact,\n  }\n}\n\n\nexport const fetchContactFailure = error => {\n  return {\n    type: FETCH_CONTACT_FAILURE,\n    payload: error\n  }\n}\n\nexport const fetchContact = () => {\n  return (dispatch) => {\n    dispatch(fetchContactRequest)\n    axios({\n      method: 'get',\n      url: `${process.env.REACT_APP_API_HOST}${process.env.REACT_APP_API_CONTACT}`,\n      data: {},\n      validateStatus: () => true,\n    })\n    .then(response => {\n      const contact = response\n      dispatch(fetchContactSuccess(contact))\n    })\n    .catch(errors => {\n      dispatch(fetchContactFailure(errors))\n    })\n  }\n}\n\nexport const fetchContactDelete = (id) => {\n  return (dispatch) => {\n    dispatch(fetchContactRequest)\n    axios({\n      method: 'delete',\n      url: `${process.env.REACT_APP_API_HOST}${process.env.REACT_APP_API_CONTACT}/${id}`,\n      validateStatus: () => true,\n    })\n    .then(response => {\n      const contact = response\n      console.log('delete', contact)\n    })\n    .catch(errors => {\n      dispatch(fetchContactFailure(errors))\n    })\n  }\n}\n\n","import axios from 'axios';\n\nimport { \n  FETCH_CONTACT_DETAIL_REQUEST,\n  FETCH_CONTACT_DETAIL_SUCCESS,\n  FETCH_CONTACT_DETAIL_FAILURE\n } from './contactDetailTypes';\n\nexport const fetchContactDetailRequest = () => {\n  return {\n    type: FETCH_CONTACT_DETAIL_REQUEST\n  }\n}\n\nexport const fetchContactDetailSuccess = contentDetail => {\n  return {\n    type: FETCH_CONTACT_DETAIL_SUCCESS,\n    payload: contentDetail,\n  }\n}\n\nexport const fetchContactDetailFailure = error => {\n  return {\n    type: FETCH_CONTACT_DETAIL_FAILURE,\n    payload: error\n  }\n}\n\nexport const fetchContactDetail = (id) => {\n  return (dispatch) => {\n    dispatch(fetchContactDetailRequest)\n    axios({\n      method: 'get',\n      url: `${process.env.REACT_APP_API_HOST}${process.env.REACT_APP_API_CONTACT}/${id}`,\n      data: {},\n      validateStatus: () => true,\n    })\n    .then(response => {\n      const contactDetail = response\n      dispatch(fetchContactDetailSuccess(contactDetail))\n    })\n    .catch(errors => {\n      dispatch(fetchContactDetailFailure(errors))\n    })\n  }\n}","import axios from 'axios';\n\nimport { \n  FETCH_CONTACT_ADD_REQUEST,\n  FETCH_CONTACT_ADD_SUCCESS,\n  FETCH_CONTACT_ADD_FAILURE,\n } from './contactAddTypes';\n\nexport const fetchContactAddRequest = () => {\n  return {\n    type: FETCH_CONTACT_ADD_REQUEST\n  }\n}\n\nexport const fetchContactAddSuccess = contactAdd => {\n  return {\n    type: FETCH_CONTACT_ADD_SUCCESS,\n    payload: contactAdd,\n  }\n}\n\n\nexport const fetchContactAddFailure = error => {\n  return {\n    type: FETCH_CONTACT_ADD_FAILURE,\n    payload: error\n  }\n}\n\nexport const fetchContactAdd = (data) => {\n  return (dispatch) => {\n    dispatch(fetchContactAddRequest)\n    axios({\n      method: 'post',\n      url: `${process.env.REACT_APP_API_HOST}${process.env.REACT_APP_API_CONTACT}`,\n      data,\n      validateStatus: () => true,\n    })\n    .then(response => {\n      const contactAdd = response\n      dispatch(fetchContactAddSuccess(contactAdd))\n    })\n    .catch(errors => {\n      console.log(errors)\n      dispatch(fetchContactAddFailure(errors))\n    })\n  }\n}\n","import axios from 'axios';\n\nimport { \n  FETCH_CONTACT_UPDATE_REQUEST,\n  FETCH_CONTACT_UPDATE_SUCCESS,\n  FETCH_CONTACT_UPDATE_FAILURE\n } from './contactUpdateTypes';\n\nexport const fetchContactUpdateRequest = () => {\n  return {\n    type: FETCH_CONTACT_UPDATE_REQUEST\n  }\n}\n\nexport const fetchContactUpdateSuccess = contactUpdate => {\n  return {\n    type: FETCH_CONTACT_UPDATE_SUCCESS,\n    payload: contactUpdate,\n  }\n}\n\nexport const fetchContactUpdateFailure = error => {\n  return {\n    type: FETCH_CONTACT_UPDATE_FAILURE,\n    payload: error\n  }\n}\n\nexport const fetchContactUpdate = (id,data) => {\n  console.log('fetch',data)\n  return (dispatch) => {\n    dispatch(fetchContactUpdateRequest)\n    axios({\n      method: 'put',\n      url: `${process.env.REACT_APP_API_HOST}${process.env.REACT_APP_API_CONTACT}/${id}`,\n      data,\n      validateStatus: () => true,\n    })\n    .then(response => {\n      const contactUpdate = response\n      dispatch(fetchContactUpdateSuccess(contactUpdate))\n    })\n    .catch(errors => {\n      dispatch(fetchContactUpdateFailure(errors))\n    })\n  }\n}","import React, { Component } from 'react'\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport { connect } from 'react-redux'\nimport { fetchContact,fetchContactDelete } from '../../redux'\nimport Button from '@material-ui/core/Button';\n\nclass Contact extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n    }\n  }\n  \n  async componentDidMount(){\n    await this.props.fetchContact()\n  }\n\n  getDetail = async (id) => {\n    this.props.history.push({\n      pathname: '/ContactDetail/' + id});\n  }\n\n  getDelete = (id) => {\n    this.props.fetchContactDelete(id)\n  }\n\n  goToAddContact = async () =>{\n    await this.props.history.push({\n      pathname: '/ContactAdd'});\n  }\n\n\n  goToUpdateContact = async (row) =>{\n    const { id } = row\n    console.log(id);\n    await this.props.history.push({\n      pathname: `/ContactUpdate/${id}`,\n      data: row});\n  }\n\n  render() {\n    const {contactData} = this.props;\n    console.log(contactData)\n    return (\n      <Container style={{marginTop:100}}>\n        <Button onClick={() => this.goToAddContact()} style={{marginBottom:'10px'}} variant=\"contained\" color=\"primary\">\n          Add Contact\n        </Button>\n        <TableContainer component={Paper}>\n          <Table aria-label=\"a dense table\">\n            <TableHead>\n              <TableRow>\n                <TableCell align=\"left\">First Name</TableCell>\n                <TableCell align=\"left\">Last Name</TableCell>\n                <TableCell align=\"left\">Age</TableCell>\n                <TableCell align=\"right\">Action</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {contactData.map((row) => (\n                <TableRow key={row.id}>\n                  <TableCell align=\"left\">{row.firstName}</TableCell>\n                  <TableCell align=\"left\">{row.lastName}</TableCell>\n                  <TableCell align=\"left\">{row.age}</TableCell>\n                  <TableCell align=\"right\">\n                    <Button onClick={() => this.getDetail(row.id)} style={{marginRight:'5px'}} variant=\"contained\" color=\"primary\">\n                      Detail\n                    </Button>\n                    <Button onClick={() => this.goToUpdateContact(row)}  style={{marginRight:'5px'}} variant=\"contained\" color=\"secondary\">\n                      Change\n                    </Button>\n                    <Button onClick={() => this.getDelete(row.id)} variant=\"contained\" color=\"secondary\">\n                      Delete\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n            \n          </Table>\n        </TableContainer>\n      </Container>\n    )\n  }\n}\n\n\nconst MapStateToProps = (state) => {\n  return {\n    // contactData: state.contact.content.data ? state.contact.content.data.data : [],\n    contactData: state.contact.contact.data ? state.contact.contact.data.data :[],\n  }\n}\n\nconst MapDispatchToProps = (dispatch) => {\n  return {\n    fetchContact: () => dispatch(fetchContact()),\n    fetchContactDelete: (params) => dispatch(fetchContactDelete(params)),\n  }\n}\n\nexport default connect(MapStateToProps, MapDispatchToProps)(Contact)\n","import React, { Component } from 'react'\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { connect } from 'react-redux'\nimport { fetchContactDetail } from '../../redux'\n\nclass ContactDetail extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n    }\n  }\n  \n  getBack = async (id) => {\n    this.props.history.push({\n      pathname: '/'});\n  }\n\n  async componentDidMount(){\n    const pageURL = await window.location.href;\n    const lastURLSegment = await pageURL.substr(pageURL.lastIndexOf('/') + 1);\n    await this.props.fetchContactDetail(lastURLSegment)\n  }\n\n\n  render() {\n    const { contactDetailData } = this.props;\n    console.log(contactDetailData)\n    return (\n      <Container style={{marginTop:100}}>\n        <div className=\"button-custom\" >\n          <Button onClick={() => this.getBack()}  variant=\"contained\" color=\"primary\">\n            Back\n          </Button>\n        </div>\n        <Grid container>\n          <Paper>\n            <Grid item className=\"paperStyle\" sm={12} xs={12}>\n              <div>\n                <img className=\"detail-avatar\" style={{ width:175, height:175 }}  alt={contactDetailData.firstName} src={contactDetailData.photo !== 'N/A' ? contactDetailData.photo : 'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRSKJSt6ck2GifQGbuktdinQnUQnK919aaNoA&usqp=CAU'} />\n              </div>\n              <div className=\"detail-wrapping\">\n                <div className=\"name\">{`${contactDetailData.firstName} ${contactDetailData.lastName}`}</div>\n                <div className=\"description\">Product Designer</div>\n                <div className=\"age\">{contactDetailData.age} years old</div>\n              </div>\n            </Grid>\n          </Paper>\n        </Grid>\n      </Container>\n    )\n  }\n}\n\nconst MapStateToProps = (state) => {\n  return {\n    contactDetailData: state.contactDetail.contactDetail.data ? state.contactDetail.contactDetail.data.data : ''\n  }\n}\n\nconst MapDispatchToProps = (dispatch) => {\n  return {\n    fetchContactDetail: (params) => dispatch(fetchContactDetail(params)),\n  }\n}\n\nexport default connect(MapStateToProps, MapDispatchToProps)(ContactDetail)\n","import React, { Component } from 'react'\n\nimport Container from '@material-ui/core/Container';\nimport { connect } from 'react-redux'\nimport { fetchContactAdd } from '../../redux'\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Swal from 'sweetalert2'\n\n\nclass ContactAdd extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      firstName:'',\n      lastName:'',\n      age:0,\n      photo:'',\n    }\n  }\n  \n\n  addContact = async () => {\n    const { firstName, lastName, age, photo } = this.state\n    let data = {\n      firstName, lastName, age, photo\n    };\n    this.props.fetchContactAdd(data);\n  }\n\n  goToContact = async () =>{\n    this.props.history.push({\n      pathname: '/'});\n  }\n\n  render() {\n    const { contactAdd } = this.props\n    if(contactAdd.status === 400){\n      Swal.fire({\n        title: 'Cancel add contact!',\n        text: contactAdd.data.message,\n        icon: 'error',\n        confirmButtonColor: '#3085d6',\n        confirmButtonText: 'Try'\n      }).then((result) => {\n        if (result.isConfirmed) {\n          window.location.reload();\n        }\n      })\n    } else if (contactAdd.status === 201){\n      Swal.fire({\n        title: 'Your contact has been saved',\n        text: contactAdd.data.message,\n        icon: 'success',\n        confirmButtonColor: '#3085d6',\n        confirmButtonText: 'Go to Contact'\n      }).then((result) => {\n        if (result.isConfirmed) {\n          this.props.history.push({\n            pathname: '/'});\n        }\n      })\n    }\n    \n    const { firstName, lastName, age, photo } = this.state\n    return (\n      <Container style={{marginTop:100}}>\n        <Button onClick={() => this.goToContact()} style={{marginBottom:'10px'}} variant=\"contained\" color=\"primary\">\n          Back Contact List\n        </Button>\n        <form>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"firstName\"\n            label=\"First Name\"\n            name=\"firstName\"\n            autoFocus\n            type=\"text\"\n            value={firstName}\n            onChange={(e) => this.setState({firstName: e.target.value})}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"lastName\"\n            label=\"Last Name\"\n            type=\"text\"\n            id=\"lastName\"\n            value={lastName}\n            onChange={(e) => this.setState({lastName: e.target.value})}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"age\"\n            label=\"Age\"\n            type=\"number\"\n            id=\"age\"\n            value={age}\n            onChange={(e) => this.setState({age: e.target.value})}\n          />\n\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"photo\"\n            label=\"Input your URL Photo\"\n            type=\"text\"\n            id=\"photo\"\n            value={photo}\n            onChange={(e) => this.setState({photo: e.target.value})}\n          />\n\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => this.addContact()} \n          >\n            Add Contact\n          </Button>\n          \n        </form>\n      </Container>\n    )\n  }\n}\n\nconst MapStateToProps = (state) => {\n  return {\n    contactAdd: state.contactAdd.contactAdd,\n  }\n}\nconst MapDispatchToProps = (dispatch) => {\n  return {\n    fetchContactAdd: (params) => dispatch(fetchContactAdd(params)),\n  }\n}\n\nexport default connect(MapStateToProps, MapDispatchToProps)(ContactAdd)\n","import React, { Component } from 'react'\n\nimport Container from '@material-ui/core/Container';\nimport { connect } from 'react-redux'\nimport { fetchContactUpdate } from '../../redux'\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Swal from 'sweetalert2'\n\n\nclass ContactAdd extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      firstName:this.props.location.data ? this.props.location.data.firstName : '',\n      lastName:this.props.location.data ? this.props.location.data.lastName : '',\n      age:this.props.location.data ? this.props.location.data.age : 0,\n      photo:this.props.location.data ? this.props.location.data.photo : '',\n    }\n  }\n  \n\n  updateContact = async () => {\n    const { firstName, lastName, age, photo } = this.state\n    let data = {\n      firstName, lastName, age, photo\n    };\n    this.props.fetchContactUpdate(this.getLastURl(), data);\n  }\n\n  goToContact = async () =>{\n    this.props.history.push({\n      pathname: '/'});\n  }\n\n  getLastURl =  () =>{\n    const pageURL = window.location.href;\n    const lastURLSegment = pageURL.substr(pageURL.lastIndexOf('/') + 1);\n    return lastURLSegment;\n  }\n\n\n  render() {\n    const { contactUpdate } = this.props\n    if(contactUpdate.status === 400){\n      Swal.fire({\n        title: 'Update contact error!',\n        text: contactUpdate.data.message,\n        icon: 'error',\n        confirmButtonColor: '#3085d6',\n        confirmButtonText: 'Try'\n      }).then((result) => {\n        if (result.isConfirmed) {\n          window.location.reload();\n        }\n      })\n    } else if (contactUpdate.status === 201){\n      Swal.fire({\n        title: 'Your contact has been updated',\n        text: contactUpdate.data.message,\n        icon: 'success',\n        confirmButtonColor: '#3085d6',\n        confirmButtonText: 'Go to Contact'\n      }).then((result) => {\n        if (result.isConfirmed) {\n          this.props.history.push({\n            pathname: '/'});\n        }\n      })\n    }\n    return (\n      <Container style={{marginTop:100}}>\n        <Button onClick={() => this.goToContact()} style={{marginBottom:'10px'}} variant=\"contained\" color=\"primary\">\n          Back Contact List\n        </Button>\n        <form>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"firstName\"\n            label=\"First Name\"\n            name=\"firstName\"\n            autoFocus\n            type=\"text\"\n            value={this.state.firstName}\n            onChange={(e) => this.setState({firstName: e.target.value})}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"lastName\"\n            label=\"Last Name\"\n            type=\"text\"\n            id=\"lastName\"\n            value={this.state.lastName}\n            onChange={(e) => this.setState({lastName: e.target.value})}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"age\"\n            label=\"Age\"\n            type=\"number\"\n            id=\"age\"\n            value={this.state.age}\n            onChange={(e) => this.setState({age: e.target.value})}\n          />\n\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"photo\"\n            label=\"Input your URL Photo\"\n            type=\"text\"\n            id=\"photo\"\n            value={this.state.photo}\n            onChange={(e) => this.setState({photo: e.target.value})}\n          />\n\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => this.updateContact()} \n          >\n            Update Contact\n          </Button>\n          \n        </form>\n      </Container>\n    )\n  }\n}\n\nconst MapStateToProps = (state) => {\n  return {\n    contactUpdate: state.contactUpdate.contactUpdate,\n  }\n}\nconst MapDispatchToProps = (dispatch) => {\n  return {\n    fetchContactUpdate: (id, params) => dispatch(fetchContactUpdate(id,params)),\n  }\n}\n\nexport default connect(MapStateToProps, MapDispatchToProps)(ContactAdd)\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './styles/index.scss';\nimport Contact from './component/pages/Contact';\nimport ContactDetail from './component/pages/ContactDetail';\nimport ContactAdd from './component/pages/ContactAdd';\nimport ContactUpdate from './component/pages/ContactUpdate';\n\nimport {\n  BrowserRouter as Router, Switch, Route\n} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n        <Router>\n          <Switch>\n            <Route path=\"/\" exact component={Contact} />\n            <Route path=\"/ContactDetail/:id\" component={ContactDetail} />\n            <Route path=\"/ContactAdd\" component={ContactAdd} />\n            <Route path=\"/ContactUpdate/:id\" component={ContactUpdate} />\n          </Switch>\n        </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}